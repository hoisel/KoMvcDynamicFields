@model KoMvcDynamicFields.Models.HomeViewModel
@using KoMvcDynamicFields.Common

@{
    ViewBag.Title = "Home";
}

<header class="navbar navbar-inverse navbar-fixed-top" role="banner">
    <div class="container">
        <div class="navbar-header">
            <h2>MVC + ko = dynamic fields </h2>
        </div>
    </div>
</header>

<br />
<br />

<div class="container">

    <br />
    <br />

    <div class="row">
        <div class="col-lg-8">

            @using (Html.BeginForm("Index", "Home", FormMethod.Post, new { @class = "form-inline", role = "form" }))
            {
                <fieldset>
                    <legend>Personal Information</legend>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Person.Name)
                        @Html.TextBoxFor(model => model.Person.Name, new { data_bind = "value: Person.Name", @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Person.Age)
                        @Html.TextBoxFor(model => model.Person.Age, new { data_bind = "value: Person.Age", @class = "form-control" })
                    </div>
                </fieldset>
                
                <br />
                <br />
                <div data-bind='with: Person' class="form-dinamico">

                    <fieldset>
                        <legend><span data-bind="text: Jobs().length"></span> Recent Jobs</legend>
                        <button data-bind="click: addJob" class="btn btn-primary btn-xs"><span class="glyphicon glyphicon-plus-sign"></span> Add job</button>

                        <div class="dynamic-container" data-bind="foreach: Jobs">
                            @Html.EditorFor(model => model.Person.Jobs[0])  <!-- will use 'JobVM' editor on Views/Shared/EditorTemplates folder -->
                        </div>
                    </fieldset>

                    <fieldset>
                        <button data-bind="click: addCourse" class="btn btn-primary btn-xs"><span class="glyphicon glyphicon-plus-sign"></span> Add course</button>
                        <legend><span data-bind="text: Courses().length"></span> Courses</legend>

                        <div class="dynamic-container" data-bind="foreach: Courses">
                            @Html.EditorFor(model => model.Person.Courses[0]) <!-- will use 'CourseVM' editor on Views/Shared/EditorTemplates folder -->
                        </div>
                    </fieldset>

                    <fieldset>
                        <button data-bind="click: addNickname" class="btn btn-primary btn-xs"><span class="glyphicon glyphicon-plus-sign"></span> Add nickname</button>
                        <legend><span data-bind="text: Nicknames().length"></span> Nicknames</legend>

                        <div class="dynamic-container" data-bind="foreach: Nicknames">
                            @Html.EditorFor(model => model.Person.Nicknames[0], "NicknameVM") <!-- will use 'NicknameVM' editor on Views/Shared/EditorTemplates folder -->
                        </div>
                    </fieldset>


                    <fieldset>
                        <button data-bind="click: addHouse" class="btn btn-primary btn-xs"><span class="glyphicon glyphicon-plus-sign"></span> Add house</button>
                        <legend><span data-bind="text: Houses().length"></span> Houses</legend>

                        <div class="dynamic-container" data-bind="foreach: Houses">
                            @Html.EditorFor(model => model.Person.Houses[0]) <!-- will use 'HousesVM' editor on Views/Shared/EditorTemplates folder -->
                        </div>
                    </fieldset>

                    <input type="Submit" class="btn btn-primary btn-lg" value="Salvar" />

                    <br />
                    <br />
                    <br />
                    <br />
                </div>
            }
        </div>

        <div class="col-lg-4 cm">
            <div class="cm-content">
                <h3>Comments</h3>
            </div>
            <div class="cm-content">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit fusce vel sapien elit in malesuada semper mi, id sollicitudin urna fermentum ut fusce varius nisl ac ipsum gravida vel pretium tellus.
Lorem ipsum dolor sit amet, consectetur adipiscing elit fusce vel sapien elit in malesuada semper mi, id sollicitudin urna fermentum ut fusce varius nisl ac ipsum gravida vel pretium tellus.Lorem ipsum dolor sit amet, consectetur adipiscing elit fusce vel sapien elit in malesuada semper mi, id sollicitudin urna fermentum ut fusce varius nisl ac ipsum gravida vel pretium tellus.
            </div>

            <div class="cm-content">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit fusce vel sapien elit in malesuada semper mi, id sollicitudin urna fermentum ut fusce varius nisl ac ipsum gravida vel pretium tellus.
Lorem ipsum dolor sit amet, consectetur adipiscing elit fusce vel sapien elit in malesuada semper mi, id sollicitudin urna fermentum ut fusce varius nisl ac ipsum gravida vel pretium tellus.
            </div>
            <div class="cm-content">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit fusce vel sapien elit in malesuada semper mi, id sollicitudin urna fermentum ut fusce varius nisl ac ipsum gravida vel pretium tellus.
Lorem ipsum dolor sit amet, consectetur adipiscing elit fusce vel sapien elit in malesuada semper mi, id sollicitudin urna fermentum ut fusce varius nisl ac ipsum gravida vel pretium tellus.
            </div>
        </div>
    </div>


</div>


@section scripts{

    <script type="text/javascript">

        // necessário quando se usa mapping plugins:
        // http://stackoverflow.com/questions/12333915/how-do-i-make-a-deep-copy-of-a-knockout-object-that-was-created-by-the-mapping-p
        function deepClone( obj ) {
            return ko.mapping.fromJS( ko.mapping.toJS( obj ) );
        }


        function installFunctions( root, propName ) {

            var props = propName.split( '.' );
            var collectionName = props.slice( -1 )[0];
            var unitName = collectionName.substring( 0, collectionName.length - 1 );  // TODO: melhorar depois. Remove o s do final
            var fnAddName = 'add' + unitName;                                       // ex: addNicknames
            var fnRemoveName = 'remove' + unitName;                                 // ex: removeCourses
            var newItemName = 'New' + unitName;
            var newItem = root[newItemName];
            var parent;

            props.shift(); // remove viewmodel root (first item)

            // change current root property
            props.forEach( function( prop ) {
                parent = root;
                root = root[prop];
            } );

            // attach functions
            parent[fnAddName] = function() {
                root.push( newItem ? deepClone( newItem ) : '' );
            };

            parent[fnRemoveName] = function( item ) {
                root.remove( item );
            };
        }


        function createViewModel() {

            // Usa o extension method para serializar o objeto c# para uma string no formato json;
            // Você precisa disso pois possui um cenário onde está fazendo o update de uma entidade (juntamente com seus relacionamentos). 
            // Assim você precisa passar para o knockout (javascript) o seu viewmodel ( C# ). Dessa maneira é
            // preciso fazer as conversões:
            //
            //  (1) de C# --> json string 
            //  (2) json string --> objeto javascript
            //
            // ref: http://lostechies.com/erichexter/2012/11/29/loading-knockout-view-models-from-asp-net-mvc/

            //  (1) C# --> json string 
            var jsonModel = '@Html.Raw(@Model.ToJson())';

            //  (2) json string --> objeto javascript
            // usa o mapping plugin para tranformar a string json que representa o viewmodel serializado, em observables do ko
            //homeViewModel = ko.mapping.fromJSON(jsonModel);   // ref: http://knockoutjs.com/documentation/plugins-mapping.html
            var viewModel = ko.mapping.fromJSON( jsonModel );

            //homeViewModel.adicionarEmprego = function () {
            //    homeViewModel.Person.Empregos.push(deepClone(this.NovoEmprego));
            //};

            //homeViewModel.removerEmprego = function (emprego) {
            //    homeViewModel.Person.Empregos.remove(emprego);
            //};


            //homeViewModel.adicionarCurso = function () {
            //    homeViewModel.Person.Cursos.push(deepClone(this.NovoCurso));
            //};

            //homeViewModel.removerCurso = function (curso) {
            //    homeViewModel.Person.Cursos.remove(curso);
            //};

            ////TODo: erro na exclusão
            //homeViewModel.adicionarApelido = function () {
            //    homeViewModel.Person.Apelidos.push("");
            //};

            //homeViewModel.removerApelido = function (apelido) {
            //    homeViewModel.Person.Apelidos.remove(apelido);
            //};

            // instala funções de adicionar e remover para as propriedades marcadas como dinamicas
            viewModel.DynamicProperties()
                     .forEach( function( propName ) {
                         installFunctions( viewModel, propName );
                     } );

            return viewModel;
        }


        $( function() {

            var homeViewModel = createViewModel();

            // aplica os bindings do knockout
            ko.applyBindings( homeViewModel );
        } );

    </script>
}